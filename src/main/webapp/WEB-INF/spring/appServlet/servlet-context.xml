<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
	 http://www.springframework.org/schema/mvc/spring-mvc.xsd
		
		 http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.1.xsd">

<context:component-scan base-package="com.wirecard.ezecom" /> 


	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
		<context:property-placeholder location="/WEB-INF/jdbc.properties,/WEB-INF/mybatis/mybatis.properties" file-encoding="UTF-8"/> 
	
	
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven /> 
	
	
	
	
	 <!-- Enable annotation style of managing transactions --> 
    <tx:annotation-driven transaction-manager="transactionManager" /> 

	
    <!-- Declare a datasource that has pooling capabilities  -->
    <beans:bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
    destroy-method="close" p:driverClass="${app.jdbc.driverClassName}"
    p:jdbcUrl="${app.jdbc.url}" p:user="${app.jdbc.username}" p:password="${app.jdbc.password}"
    p:acquireIncrement="10" p:idleConnectionTestPeriod="60" p:maxPoolSize="100"
    p:maxStatements="50" p:minPoolSize="10" /> 

    <!-- Declare a transaction manager  -->
    <beans:bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
    p:dataSource-ref="dataSource" /> 

    <!-- define the SqlSessionFactory, notice that configLocation is not needed when you use MapperFactoryBean  -->
    <beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
        <beans:property name="typeAliasesPackage" value="com.wirecard.ezecom.dto" />  
  		<beans:property name="mapperLocations" value="classpath*:com/wirecard/ezecom/mapper/dao/xml/*.xml" />
  		
        <beans:property name="configLocation" value="WEB-INF/mybatis/sqlmap-config.xml" />
    </beans:bean> 
    

    <!-- scan for mappers and let them be autowired  -->
    <beans:bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
         <!--<beans:property name="basePackage" value="${MapperInterfacePackage}" />-->
        <beans:property name="basePackage" value="com.wirecard.ezecom.mapper.dao"/> 
         
    </beans:bean> 
	

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	
	<!-- <beans:bean  class="com.wirecard.ezecom.validator.ItemValidator" />  -->
	<!-- <beans:bean  class="com.wirecard.ezecom.validator.EMerchantDetailsValidator" />  -->
	
 	<!-- Register the Customer.properties -->
	<beans:bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<beans:property name="basename" value="com/wirecard/ezecom/validator/properties/ItemBean" />
	</beans:bean>
	

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	
	
	
</beans:beans>
